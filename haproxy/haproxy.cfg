
global
    maxconn 256
    lua-load /usr/local/etc/haproxy/acme-http01-webroot.lua
    lua-load /usr/local/etc/haproxy/cors.lua
    chroot /jail
    ssl-default-bind-ciphers AES256+EECDH:AES256+EDH:!aNULL;
    tune.ssl.default-dh-param 4096
    log         127.0.0.1 local2 debug

defaults
    mode http
    log global
    option  httplog
    option logasap
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option forwardfor
    option http-server-close


frontend http-in
    bind *:80

    acl url_acme_http01 path_beg /.well-known/acme-challenge/
    http-request use-service lua.acme-http01 if METH_GET url_acme_http01
    
    acl host_direct hdr_reg(host) -i ^.*\.direct\..*?:?.*$
    use_backend l2 if host_direct

    redirect scheme https code 301 if !{ ssl_fc } !host_direct

    default_backend pwd 

frontend ft_ssl_vip
    bind *:443 ssl crt /usr/local/etc/haproxy/certs/ no-sslv3 no-tls-tickets no-tlsv10 no-tlsv11

    rspadd Strict-Transport-Security:\ max-age=15768000
    
    # CORS configuration
    # capture origin HTTP header
    capture request header origin len 128
    # add Access-Control-Allow-Origin HTTP header to response if origin matches the list of allowed URLs
    http-response add-header Access-Control-Allow-Origin %[capture.req.hdr(0)] if !METH_OPTIONS { capture.req.hdr(0) -m reg -f /usr/local/etc/haproxy/cors-origins.lst }
    # if a preflight request is made, use CORS preflight backend
    http-request use-service lua.cors-response if METH_OPTIONS { capture.req.hdr(0) -m reg -f /usr/local/etc/haproxy/cors-origins.lst }

    acl host_direct hdr_reg(host) -i ^.*\.direct\..*?:?.*$
    use_backend l2 if host_direct

    default_backend pwd

backend pwd
    server node1 pwd:3000

backend l2
    server node2 l2:8443


